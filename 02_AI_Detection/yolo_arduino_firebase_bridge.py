#!/usr/bin/env python3
"""
YOLO Arduino Firebase Bridge
‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ YOLO -> Arduino R4 -> Firebase
‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô

Author: P2P Team
Version: 2.0
"""

import cv2
import numpy as np
import serial
import time
import requests
import json
from datetime import datetime
import threading
import os
import sys
from pathlib import Path

# Configuration
class Config:
    # Arduino Settings
    ARDUINO_PORT = 'COM3'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° port ‡∏Ç‡∏≠‡∏á Arduino R4
    ARDUINO_BAUD_RATE = 115200
    ARDUINO_TIMEOUT = 2
    
    # Camera Settings
    CAMERA_INDEX = 0
    FRAME_WIDTH = 640
    FRAME_HEIGHT = 480
    
    # Firebase Settings
    FIREBASE_URL = "https://takultoujink-default-rtdb.asia-southeast1.firebasedatabase.app"
    USER_ID = "yolo_user"  # ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å web login ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
    
    # YOLO Settings
    YOLO_DIR = "yolo"
    YOLO_CONFIG = os.path.join(YOLO_DIR, "yolov3.cfg")
    YOLO_WEIGHTS = os.path.join(YOLO_DIR, "yolov3.weights")
    YOLO_CLASSES = os.path.join(YOLO_DIR, "coco.names")
    
    # Detection Settings
    CONFIDENCE_THRESHOLD = 0.5
    NMS_THRESHOLD = 0.4
    DETECTION_COOLDOWN = 2.0  # seconds
    BOTTLE_CLASS_ID = 39  # 'bottle' in COCO dataset

class ArduinoManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino R4"""
    
    def __init__(self, port=Config.ARDUINO_PORT, baud_rate=Config.ARDUINO_BAUD_RATE):
        self.port = port
        self.baud_rate = baud_rate
        self.arduino = None
        self.connected = False
        self.connect()
    
    def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino"""
        try:
            self.arduino = serial.Serial(
                self.port, 
                self.baud_rate, 
                timeout=Config.ARDUINO_TIMEOUT
            )
            time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Arduino ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.connected = True
            print(f"‚úÖ Arduino connected on {self.port}")
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            self.send_command("TEST")
            
        except Exception as e:
            print(f"‚ùå Failed to connect to Arduino: {e}")
            print("üí° Tips:")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Arduino ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö USB ‡πÅ‡∏•‡πâ‡∏ß")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COM port ‡πÉ‡∏ô Device Manager")
            print("   - ‡∏õ‡∏¥‡∏î Arduino IDE ‡∏´‡∏£‡∏∑‡∏≠ Serial Monitor")
            self.connected = False
    
    def send_command(self, command):
        """‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ Arduino"""
        if not self.connected:
            return False
        
        try:
            message = f"{command}\n"
            self.arduino.write(message.encode())
            print(f"üì° ‚Üí Arduino: {command}")
            return True
        except Exception as e:
            print(f"‚ùå Error sending to Arduino: {e}")
            return False
    
    def read_response(self):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Arduino"""
        if not self.connected:
            return None
        
        try:
            if self.arduino.in_waiting > 0:
                response = self.arduino.readline().decode().strip()
                if response:
                    print(f"üì° ‚Üê Arduino: {response}")
                return response
        except Exception as e:
            print(f"‚ùå Error reading from Arduino: {e}")
        return None
    
    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.arduino and self.connected:
            self.arduino.close()
            print("üîå Arduino connection closed")

class FirebaseManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase"""
    
    def __init__(self, base_url=Config.FIREBASE_URL, user_id=Config.USER_ID):
        self.base_url = base_url
        self.user_id = user_id
    
    def send_data(self, data, path="bottle_data"):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase"""
        try:
            url = f"{self.base_url}/{path}/{self.user_id}.json"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
            data_with_timestamp = {
                **data,
                "timestamp": datetime.now().isoformat(),
                "unix_timestamp": int(time.time())
            }
            
            response = requests.put(url, json=data_with_timestamp, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ Firebase: Data sent successfully")
                return True
            else:
                print(f"‚ùå Firebase error: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Firebase connection error: {e}")
            return False
    
    def get_data(self, path="bottle_data"):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase"""
        try:
            url = f"{self.base_url}/{path}/{self.user_id}.json"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå Firebase get error: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Firebase get error: {e}")
            return None

class YOLODetector:
    """YOLO Object Detection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ß‡∏î"""
    
    def __init__(self):
        self.net = None
        self.classes = []
        self.output_layers = []
        self.load_model()
    
    def load_model(self):
        """‡πÇ‡∏´‡∏•‡∏î YOLO model"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå YOLO
            if not all(os.path.exists(f) for f in [Config.YOLO_CONFIG, Config.YOLO_WEIGHTS, Config.YOLO_CLASSES]):
                print("‚ùå YOLO files not found!")
                self.download_yolo_files()
            
            # ‡πÇ‡∏´‡∏•‡∏î YOLO network
            self.net = cv2.dnn.readNet(Config.YOLO_WEIGHTS, Config.YOLO_CONFIG)
            
            # ‡πÇ‡∏´‡∏•‡∏î class names
            with open(Config.YOLO_CLASSES, "r") as f:
                self.classes = [line.strip() for line in f.readlines()]
            
            # ‡∏£‡∏±‡∏ö output layer names
            layer_names = self.net.getLayerNames()
            self.output_layers = [layer_names[i[0] - 1] for i in self.net.getUnconnectedOutLayers()]
            
            print("‚úÖ YOLO model loaded successfully!")
            print(f"üìä Classes loaded: {len(self.classes)}")
            
        except Exception as e:
            print(f"‚ùå Failed to load YOLO model: {e}")
            sys.exit(1)
    
    def download_yolo_files(self):
        """‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå YOLO"""
        import urllib.request
        
        if not os.path.exists(Config.YOLO_DIR):
            os.makedirs(Config.YOLO_DIR)
        
        files_to_download = [
            ("https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg", Config.YOLO_CONFIG),
            ("https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names", Config.YOLO_CLASSES),
        ]
        
        for url, filename in files_to_download:
            if not os.path.exists(filename):
                print(f"üì• Downloading {filename}...")
                urllib.request.urlretrieve(url, filename)
                print(f"‚úÖ Downloaded {filename}")
        
        # Weights file ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏¢‡∏Å
        if not os.path.exists(Config.YOLO_WEIGHTS):
            print("‚ö†Ô∏è  Please download yolov3.weights manually:")
            print("   https://pjreddie.com/media/files/yolov3.weights")
            print(f"   Save to: {Config.YOLO_WEIGHTS}")
            input("Press Enter after downloading...")
    
    def detect_bottles(self, frame):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ß‡∏î‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        height, width, channels = frame.shape
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö YOLO
        blob = cv2.dnn.blobFromImage(
            frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False
        )
        self.net.setInput(blob)
        outputs = self.net.forward(self.output_layers)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        class_ids = []
        confidences = []
        boxes = []
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        for output in outputs:
            for detection in output:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                
                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á
                if class_id == Config.BOTTLE_CLASS_ID and confidence > Config.CONFIDENCE_THRESHOLD:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á bounding box
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)
                    
                    # Rectangle coordinates
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    
                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)
        
        # Non-maximum suppression
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, Config.CONFIDENCE_THRESHOLD, Config.NMS_THRESHOLD)
        
        # ‡∏ß‡∏≤‡∏î bounding boxes
        bottle_count = 0
        if len(indexes) > 0:
            bottle_count = len(indexes.flatten())
            for i in indexes.flatten():
                x, y, w, h = boxes[i]
                confidence = confidences[i]
                
                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(
                    frame, 
                    f"Bottle {confidence:.2f}", 
                    (x, y - 10), 
                    cv2.FONT_HERSHEY_SIMPLEX, 
                    0.5, 
                    (0, 255, 0), 
                    2
                )
        
        return frame, bottle_count > 0, bottle_count

class BottleDetectionSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ß‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
    
    def __init__(self):
        self.bottle_count = 0
        self.total_points = 0
        self.last_detection_time = 0
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
        self.arduino = ArduinoManager()
        self.firebase = FirebaseManager()
        self.yolo = YOLODetector()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.init_camera()
        
        print("üéØ Bottle Detection System initialized!")
    
    def init_camera(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        self.cap = cv2.VideoCapture(Config.CAMERA_INDEX)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, Config.FRAME_WIDTH)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, Config.FRAME_HEIGHT)
        
        if not self.cap.isOpened():
            print("‚ùå Cannot open camera")
            sys.exit(1)
        
        print("üìπ Camera initialized")
    
    def on_bottle_detected(self, count):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡∏ß‡∏î"""
        current_time = time.time()
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if current_time - self.last_detection_time < Config.DETECTION_COOLDOWN:
            return
        
        self.last_detection_time = current_time
        self.bottle_count += count
        self.total_points = self.bottle_count * 10  # 10 ‡πÅ‡∏ï‡πâ‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏ß‡∏î
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"üçº [{timestamp}] Bottles detected: {count}, Total: {self.bottle_count}, Points: {self.total_points}")
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Arduino
        if self.arduino.connected:
            self.arduino.send_command("BOTTLE_DETECTED")
            self.arduino.send_command(f"COUNT:{self.bottle_count}")
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase
        data = {
            "bottle_count": self.bottle_count,
            "total_points": self.total_points,
            "last_detection": count,
            "device": "yolo_python"
        }
        self.firebase.send_data(data)
    
    def reset_counter(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö"""
        self.bottle_count = 0
        self.total_points = 0
        print("üîÑ Counter reset!")
        
        # ‡πÅ‡∏à‡πâ‡∏á Arduino
        if self.arduino.connected:
            self.arduino.send_command("RESET")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase
        data = {
            "bottle_count": 0,
            "total_points": 0,
            "last_detection": 0,
            "device": "yolo_python",
            "action": "reset"
        }
        self.firebase.send_data(data)
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        print("üöÄ Starting bottle detection system...")
        print("Controls:")
        print("  'q' - Quit")
        print("  'r' - Reset counter")
        print("  's' - Show status")
        print("="*50)
        
        try:
            while True:
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå Failed to grab frame")
                    break
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ß‡∏î
                frame, bottle_detected, bottles_count = self.yolo.detect_bottles(frame)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if bottle_detected:
                    self.on_bottle_detected(bottles_count)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                self.draw_info(frame, bottles_count)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏£‡∏°
                cv2.imshow('YOLO Bottle Detection - P2P System', frame)
                
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Arduino
                if self.arduino.connected:
                    response = self.arduino.read_response()
                    if response:
                        self.handle_arduino_response(response)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('r'):
                    self.reset_counter()
                elif key == ord('s'):
                    self.show_status()
        
        except KeyboardInterrupt:
            print("\nüõë System interrupted by user")
        
        finally:
            self.cleanup()
    
    def draw_info(self, frame, current_bottles):
        """‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (400, 120), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        texts = [
            f"Total Bottles: {self.bottle_count}",
            f"Total Points: {self.total_points}",
            f"Current Detection: {current_bottles}",
            f"Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}"
        ]
        
        for i, text in enumerate(texts):
            y = 30 + (i * 25)
            cv2.putText(frame, text, (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
    
    def handle_arduino_response(self, response):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Arduino"""
        if response.startswith("STATUS:"):
            # Arduino ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏≤
            status_data = response[7:].split(",")
            if len(status_data) >= 2:
                arduino_count = int(status_data[0])
                arduino_points = int(status_data[1])
                print(f"üìä Arduino Status - Count: {arduino_count}, Points: {arduino_points}")
    
    def show_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\n" + "="*50)
        print("üìä SYSTEM STATUS")
        print("="*50)
        print(f"üçº Total Bottles: {self.bottle_count}")
        print(f"‚≠ê Total Points: {self.total_points}")
        print(f"üîå Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}")
        print(f"üî• Firebase: Ready")
        print(f"üìπ Camera: Active")
        print(f"ü§ñ YOLO: Active")
        print("="*50 + "\n")
    
    def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üßπ Cleaning up...")
        
        if hasattr(self, 'cap'):
            self.cap.release()
        
        cv2.destroyAllWindows()
        
        if hasattr(self, 'arduino'):
            self.arduino.close()
        
        print("‚úÖ Cleanup completed")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ YOLO Arduino Firebase Bridge v2.0")
    print("üéØ P2P (Plastic to Point) Detection System")
    print("="*60)
    
    try:
        system = BottleDetectionSystem()
        system.run()
    except Exception as e:
        print(f"‚ùå System error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()