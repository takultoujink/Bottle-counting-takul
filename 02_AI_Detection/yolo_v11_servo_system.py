#!/usr/bin/env python3
"""
YOLOv11 Arduino Firebase Bridge with Servo Control
‡∏£‡∏ß‡∏° Servo motor control ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö YOLOv11 Detection
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö

Author: P2P Team
Version: 3.1 (YOLOv11 + Servo Edition)
"""

import serial
import time
from ultralytics import YOLO
import cv2
import requests
import json
from datetime import datetime
import os
import sys
import threading
import numpy as np

# ========================================
# Configuration Class
# ========================================
class ServoConfig:
    # Arduino Settings
    ARDUINO_PORT = "COM5"  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï Arduino ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    ARDUINO_BAUD_RATE = 9600
    ARDUINO_TIMEOUT = 1
    SEND_DELAY = 1.0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ Arduino (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    
    # YOLOv11 Settings
    MODEL_PATH = "best.pt"  # path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á YOLOv11 model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    TARGET_CLASS_ID = 0     # ID ‡∏Ç‡∏≠‡∏á plastic bottle ‡πÉ‡∏ô dataset ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    CONF_THRESHOLD = 0.80   # Confidence ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    
    # Camera Settings
    CAM_ID = 1
    DEVICE = "cpu"  # ‡∏´‡∏£‡∏∑‡∏≠ "cuda" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GPU
    IMG_SIZE = 640
    
    # Firebase Settings
    FIREBASE_URL = "https://takultoujink-default-rtdb.asia-southeast1.firebasedatabase.app"
    USER_ID = "yolo_v11_servo_user"
    
    # Display Settings
    WINDOW_NAME = "YOLOv11 P2P Detection with Servo Control (ESC to quit)"
    
    # Detection Settings
    DETECTION_COOLDOWN = 2.0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡∏ß‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    POINTS_PER_BOTTLE = 10    # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡∏ß‡∏î
    
    # Servo Settings
    SERVO_REST_POSITION = 90    # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏±‡∏Å
    SERVO_SWEEP_POSITION = 45   # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏î
    SERVO_RETURN_POSITION = 135 # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    AUTO_SERVO_SWEEP = True     # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    SERVO_DELAY = 0.5          # ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß Servo

class ArduinoServoManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Servo"""
    
    def __init__(self, port=ServoConfig.ARDUINO_PORT, baud_rate=ServoConfig.ARDUINO_BAUD_RATE):
        self.port = port
        self.baud_rate = baud_rate
        self.arduino = None
        self.connected = False
        self.last_send_time = 0
        self.servo_position = ServoConfig.SERVO_REST_POSITION
        self.connect()
    
    def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino"""
        try:
            self.arduino = serial.Serial(
                self.port, 
                self.baud_rate, 
                timeout=ServoConfig.ARDUINO_TIMEOUT
            )
            time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Arduino reset
            self.connected = True
            print(f"‚úÖ Arduino with Servo connected on {self.port}")
            
            # Initialize servo to rest position
            self.move_servo_to_rest()
            
        except Exception as e:
            print(f"‚ùå Failed to connect to Arduino: {e}")
            print("üí° Tips:")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Arduino ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö USB ‡πÅ‡∏•‡πâ‡∏ß")
            print(f"   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COM port: {self.port}")
            print("   - ‡∏õ‡∏¥‡∏î Arduino IDE ‡∏´‡∏£‡∏∑‡∏≠ Serial Monitor")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Servo ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà pin 9")
            self.connected = False
    
    def send_signal(self, detected):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ Arduino ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        current_time = time.time()
        
        if current_time - self.last_send_time >= ServoConfig.SEND_DELAY:
            if not self.connected:
                return False
            
            try:
                if detected:
                    self.arduino.write(b"90\n")
                    print("üì° ‚Üí Arduino: 90 (Plastic bottle detected)")
                    
                    # Auto servo sweep if enabled
                    if ServoConfig.AUTO_SERVO_SWEEP:
                        self.perform_bottle_sweep()
                else:
                    self.arduino.write(b"0\n")
                    print("üì° ‚Üí Arduino: 0 (No plastic bottle detected)")
                
                self.last_send_time = current_time
                return True
                
            except Exception as e:
                print(f"‚ùå Error sending to Arduino: {e}")
                return False
        
        return True  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á
    
    def move_servo_to_angle(self, angle):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß Servo ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if not self.connected:
            return False
        
        if not 0 <= angle <= 180:
            print(f"‚ùå Invalid servo angle: {angle}. Must be 0-180.")
            return False
        
        try:
            command = f"SERVO:{angle}\n"
            self.arduino.write(command.encode())
            self.servo_position = angle
            print(f"üîß Servo moved to: {angle}¬∞")
            time.sleep(ServoConfig.SERVO_DELAY)
            return True
            
        except Exception as e:
            print(f"‚ùå Error moving servo: {e}")
            return False
    
    def perform_bottle_sweep(self):
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏î‡∏Ç‡∏ß‡∏î‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if not self.connected:
            return False
        
        try:
            print("üßπ Performing automatic bottle sweep...")
            self.arduino.write(b"SWEEP\n")
            print("‚úÖ Bottle sweep command sent")
            return True
            
        except Exception as e:
            print(f"‚ùå Error performing sweep: {e}")
            return False
    
    def move_servo_to_rest(self):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß Servo ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏±‡∏Å"""
        return self.move_servo_to_angle(ServoConfig.SERVO_REST_POSITION)
    
    def test_servo(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Servo"""
        if not self.connected:
            print("‚ùå Arduino not connected")
            return False
        
        print("üîß Testing servo motor...")
        test_angles = [0, 45, 90, 135, 180, 90]  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏±‡∏Å
        
        for angle in test_angles:
            if self.move_servo_to_angle(angle):
                time.sleep(1)
            else:
                return False
        
        print("‚úÖ Servo test completed")
        return True
    
    def reset_servo(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Servo ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
        print("üîÑ Resetting servo to rest position...")
        return self.move_servo_to_rest()
    
    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.arduino and self.connected:
            # Return servo to rest position before closing
            self.move_servo_to_rest()
            time.sleep(1)
            self.arduino.close()
            print("üîå Arduino connection closed")

class FirebaseServoManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Servo"""
    
    def __init__(self, base_url=ServoConfig.FIREBASE_URL, user_id=ServoConfig.USER_ID):
        self.base_url = base_url
        self.user_id = user_id
    
    def send_data(self, data, path="bottle_servo_data"):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase"""
        try:
            url = f"{self.base_url}/{path}/{self.user_id}.json"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• servo
            data_with_timestamp = {
                **data,
                "timestamp": datetime.now().isoformat(),
                "unix_timestamp": int(time.time()),
                "model_version": "YOLOv11",
                "has_servo": True
            }
            
            print(f"üì° Sending to Firebase: {url}")
            print(f"üìÑ Data: {json.dumps(data_with_timestamp, indent=2)}")
            
            response = requests.put(url, json=data_with_timestamp, timeout=10)
            
            print(f"üìä Firebase Response Status: {response.status_code}")
            print(f"üìä Firebase Response: {response.text}")
            
            if response.status_code == 200:
                print(f"‚úÖ Firebase: Data sent successfully to {path}")
                return True
            else:
                print(f"‚ùå Firebase error: {response.status_code}")
                print(f"‚ùå Response text: {response.text}")
                return False
                
        except requests.exceptions.Timeout:
            print(f"‚ùå Firebase timeout: Request took longer than 10 seconds")
            return False
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Firebase connection error: Cannot connect to Firebase")
            print(f"üí° Check internet connection and Firebase URL")
            return False
        except Exception as e:
            print(f"‚ùå Firebase unexpected error: {e}")
            print(f"üí° Error type: {type(e).__name__}")
            return False
    
    def send_servo_data(self, servo_angle, action="servo_move"):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Servo ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏õ Firebase"""
        servo_data = {
            "servo_angle": servo_angle,
            "action": action,
            "device": "python_yolo_v11_servo"
        }
        return self.send_data(servo_data, "servo_data")

class YOLOv11ServoDetectionSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ß‡∏î‡∏î‡πâ‡∏ß‡∏¢ YOLOv11 ‡∏û‡∏£‡πâ‡∏≠‡∏° Servo Control"""
    
    def __init__(self):
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.bottle_count = 0
        self.total_points = 0
        self.last_detection_time = 0
        self.servo_actions = 0
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
        self.arduino = ArduinoServoManager()
        self.firebase = FirebaseServoManager()
        
        # ‡πÇ‡∏´‡∏•‡∏î YOLOv11 model
        self.load_model()
        
        print("üéØ YOLOv11 Servo Detection System initialized!")
        print(f"üîß Servo auto-sweep: {'Enabled' if ServoConfig.AUTO_SERVO_SWEEP else 'Disabled'}")
    
    def load_model(self):
        """‡πÇ‡∏´‡∏•‡∏î YOLOv11 model"""
        try:
            if not os.path.exists(ServoConfig.MODEL_PATH):
                print(f"‚ùå Model file not found: {ServoConfig.MODEL_PATH}")
                print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á YOLOv11 model (.pt file) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
                print("üì• ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô MODEL_PATH ‡πÉ‡∏ô ServoConfig")
                sys.exit(1)
            
            self.model = YOLO(ServoConfig.MODEL_PATH)
            print(f"‚úÖ YOLOv11 model loaded: {ServoConfig.MODEL_PATH}")
            print(f"üéØ Target class ID: {ServoConfig.TARGET_CLASS_ID}")
            print(f"üìä Confidence threshold: {ServoConfig.CONF_THRESHOLD}")
            
        except Exception as e:
            print(f"‚ùå Failed to load YOLOv11 model: {e}")
            sys.exit(1)
    
    def on_bottle_detected(self, count=1):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡∏ß‡∏î"""
        current_time = time.time()
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if current_time - self.last_detection_time < ServoConfig.DETECTION_COOLDOWN:
            return
        
        print(f"\nüîç Bottle Detection Event:")
        print(f"   - Bottles detected: {count}")
        
        self.last_detection_time = current_time
        self.bottle_count += count
        self.total_points = self.bottle_count * ServoConfig.POINTS_PER_BOTTLE
        
        print(f"   - Total count: {self.bottle_count}")
        print(f"   - Total points: {self.total_points}")
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"üçº [{timestamp}] Bottles detected: {count}, Total: {self.bottle_count}, Points: {self.total_points}")
        
        # ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Servo
        if ServoConfig.AUTO_SERVO_SWEEP:
            self.servo_actions += 1
            print(f"üßπ Servo sweep #{self.servo_actions} initiated")
        
        print(f"\nüíæ Preparing to save data to Firebase...")
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase
        data = {
            "bottle_count": self.bottle_count,
            "total_points": self.total_points,
            "last_detection": count,
            "servo_actions": self.servo_actions,
            "servo_position": self.arduino.servo_position,
            "auto_sweep_enabled": ServoConfig.AUTO_SERVO_SWEEP,
            "device": "yolo_v11_servo_python",
            "confidence_threshold": ServoConfig.CONF_THRESHOLD,
            "model_path": ServoConfig.MODEL_PATH
        }
        
        success = self.firebase.send_data(data)
        
        if success:
            print(f"‚úÖ Data saved successfully!")
        else:
            print(f"‚ùå Failed to save data to Firebase!")
        
        # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Servo
        if ServoConfig.AUTO_SERVO_SWEEP and self.arduino:
            print(f"üîÑ Auto sweep enabled - moving servo...")
        else:
            print(f"‚è∏Ô∏è Auto sweep disabled - servo stays at position {self.arduino.servo_position}¬∞")
    
    def reset_counter(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö"""
        print(f"\nüîÑ Resetting all counters...")
        
        old_count = self.bottle_count
        old_points = self.total_points
        old_actions = self.servo_actions
        
        self.bottle_count = 0
        self.total_points = 0
        self.servo_actions = 0
        
        print(f"   - Bottle count: {old_count} ‚Üí 0")
        print(f"   - Total points: {old_points} ‚Üí 0")
        print(f"   - Servo actions: {old_actions} ‚Üí 0")
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Servo
        self.arduino.reset_servo()
        
        print(f"\nüíæ Saving reset data to Firebase...")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase
        data = {
            "bottle_count": 0,
            "total_points": 0,
            "servo_actions": 0,
            "servo_position": ServoConfig.SERVO_REST_POSITION,
            "last_detection": 0,
            "device": "yolo_v11_servo_python",
            "action": "reset",
            "previous_count": old_count,
            "previous_points": old_points,
            "previous_actions": old_actions
        }
        
        success = self.firebase.send_data(data)
        
        if success:
            print(f"‚úÖ Reset data saved successfully!")
        else:
            print(f"‚ùå Failed to save reset data to Firebase!")
        
        print("üîÑ Counter and servo reset completed!")
    
    def draw_info(self, frame, detected, confidence=0.0):
        """‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (500, 180), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        texts = [
            f"YOLOv11 P2P Detection + Servo Control",
            f"Total Bottles: {self.bottle_count}",
            f"Total Points: {self.total_points}",
            f"Servo Actions: {self.servo_actions}",
            f"Detection: {'YES' if detected else 'NO'} ({confidence:.2f})",
            f"Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}",
            f"Servo Position: {self.arduino.servo_position}¬∞",
            f"Auto Sweep: {'ON' if ServoConfig.AUTO_SERVO_SWEEP else 'OFF'}"
        ]
        
        for i, text in enumerate(texts):
            y = 25 + (i * 20)
            color = (0, 255, 0) if i == 0 else (255, 255, 255)
            if i == 6:  # Servo position
                color = (0, 255, 255)  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            cv2.putText(frame, text, (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 1)
        
        return frame
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        print("üöÄ Starting YOLOv11 Servo Detection System...")
        print("Controls:")
        print("  'ESC' - Quit")
        print("  'r' - Reset counter and servo")
        print("  's' - Show status")
        print("  't' - Test servo")
        print("  'w' - Manual sweep")
        print("  '1-9' - Move servo to preset positions")
        print("  'h' - Move servo to rest position")
        print("="*70)
        
        try:
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î stream ‡∏Ç‡∏≠‡∏á YOLOv11
            for r in self.model.predict(
                source=ServoConfig.CAM_ID, 
                stream=True, 
                device=ServoConfig.DEVICE,
                conf=ServoConfig.CONF_THRESHOLD, 
                imgsz=ServoConfig.IMG_SIZE, 
                verbose=False
            ):
                frame = r.plot()  # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏•‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ plastic bottle ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
                detected = False
                max_confidence = 0.0
                bottle_count_in_frame = 0
                
                if r.boxes is not None:
                    for box in r.boxes:
                        cls_id = int(box.cls[0])
                        conf = float(box.conf[0])
                        
                        if cls_id == ServoConfig.TARGET_CLASS_ID and conf >= ServoConfig.CONF_THRESHOLD:
                            detected = True
                            bottle_count_in_frame += 1
                            max_confidence = max(max_confidence, conf)
                
                # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ Arduino
                self.arduino.send_signal(detected)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if detected:
                    self.on_bottle_detected(bottle_count_in_frame)
                
                # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                frame = self.draw_info(frame, detected, max_confidence)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û
                cv2.imshow(ServoConfig.WINDOW_NAME, frame)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                key = cv2.waitKey(1) & 0xFF
                if key == 27:  # ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
                    break
                elif key == ord('r'):
                    self.reset_counter()
                elif key == ord('s'):
                    self.show_status()
                elif key == ord('t'):
                    self.arduino.test_servo()
                elif key == ord('w'):
                    self.arduino.perform_bottle_sweep()
                elif key == ord('h'):
                    self.arduino.move_servo_to_rest()
                elif key >= ord('1') and key <= ord('9'):
                    # Preset positions
                    angle = (key - ord('1')) * 20  # 0, 20, 40, ..., 160
                    self.arduino.move_servo_to_angle(angle)
        
        except KeyboardInterrupt:
            print("\nüõë System interrupted by user")
        
        except Exception as e:
            print(f"‚ùå System error: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            self.cleanup()
    
    def show_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\n" + "="*70)
        print("üìä YOLOv11 SERVO SYSTEM STATUS")
        print("="*70)
        print(f"ü§ñ Model: {ServoConfig.MODEL_PATH}")
        print(f"üéØ Target Class ID: {ServoConfig.TARGET_CLASS_ID}")
        print(f"üìä Confidence Threshold: {ServoConfig.CONF_THRESHOLD}")
        print(f"üçº Total Bottles: {self.bottle_count}")
        print(f"‚≠ê Total Points: {self.total_points}")
        print(f"üßπ Servo Actions: {self.servo_actions}")
        print(f"üîß Servo Position: {self.arduino.servo_position}¬∞")
        print(f"üîÑ Auto Sweep: {'Enabled' if ServoConfig.AUTO_SERVO_SWEEP else 'Disabled'}")
        print(f"üîå Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}")
        print(f"üî• Firebase: Ready")
        print(f"üìπ Camera ID: {ServoConfig.CAM_ID}")
        print(f"üíª Device: {ServoConfig.DEVICE}")
        print("="*70 + "\n")
    
    def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üßπ Cleaning up...")
        
        cv2.destroyAllWindows()
        
        if hasattr(self, 'arduino'):
            self.arduino.close()
        
        print("‚úÖ Cleanup completed")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ YOLOv11 Arduino Firebase Bridge v3.1 (Servo Edition)")
    print("üéØ P2P (Plastic to Point) Detection System with Servo Control")
    print("ü§ñ Powered by YOLOv11 + Arduino Servo")
    print("="*80)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
    try:
        import ultralytics
        print(f"‚úÖ Ultralytics version: {ultralytics.__version__}")
    except ImportError:
        print("‚ùå Ultralytics not found!")
        print("üì¶ Install with: pip install ultralytics")
        return
    
    try:
        system = YOLOv11ServoDetectionSystem()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
        print("\nüîó Testing Firebase connection...")
        test_data = {
            "test": True,
            "system_start": True,
            "bottle_count": 0
        }
        
        firebase_success = system.firebase.send_data(test_data, "system_test")
        
        if firebase_success:
            print("‚úÖ Firebase connection successful!")
        else:
            print("‚ùå Firebase connection failed! Data will not be saved.")
            print("üí° Please check your internet connection and Firebase configuration.")
        
        system.run()
    except Exception as e:
        print(f"‚ùå System error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()