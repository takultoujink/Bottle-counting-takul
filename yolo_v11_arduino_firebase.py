#!/usr/bin/env python3
"""
YOLOv11 Arduino Firebase Bridge
‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö YOLOv11 ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
‡∏£‡∏ß‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö P2P Detection System

Author: P2P Team
Version: 3.0 (YOLOv11 Edition)
"""

import serial
import time
from ultralytics import YOLO
import cv2
import requests
import json
from datetime import datetime
import os
import sys
import threading

# ========================================
# Configuration Class
# ========================================
class Config:
    # Arduino Settings
    ARDUINO_PORT = "COM5"  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏û‡∏≠‡∏£‡πå‡∏ï Arduino ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    ARDUINO_BAUD_RATE = 9600
    ARDUINO_TIMEOUT = 1
    SEND_DELAY = 1.0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ Arduino (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    
    # YOLOv11 Settings
    MODEL_PATH = "best.pt"  # path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á YOLOv11 model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    TARGET_CLASS_ID = 0     # ID ‡∏Ç‡∏≠‡∏á plastic bottle ‡πÉ‡∏ô dataset ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    CONF_THRESHOLD = 0.80   # Confidence ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    
    # Camera Settings
    CAM_ID = 1
    DEVICE = "cpu"  # ‡∏´‡∏£‡∏∑‡∏≠ "cuda" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GPU
    IMG_SIZE = 640
    
    # Firebase Settings
    FIREBASE_URL = "https://takultoujink-default-rtdb.asia-southeast1.firebasedatabase.app"
    USER_ID = "yolo_v11_user"
    
    # Display Settings
    WINDOW_NAME = "YOLOv11 P2P Detection (ESC to quit)"
    
    # Detection Settings
    DETECTION_COOLDOWN = 2.0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡∏ß‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    POINTS_PER_BOTTLE = 10    # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡∏ß‡∏î

class ArduinoManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino"""
    
    def __init__(self, port=Config.ARDUINO_PORT, baud_rate=Config.ARDUINO_BAUD_RATE):
        self.port = port
        self.baud_rate = baud_rate
        self.arduino = None
        self.connected = False
        self.last_send_time = 0
        self.connect()
    
    def connect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Arduino"""
        try:
            self.arduino = serial.Serial(
                self.port, 
                self.baud_rate, 
                timeout=Config.ARDUINO_TIMEOUT
            )
            time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Arduino reset
            self.connected = True
            print(f"‚úÖ Arduino connected on {self.port}")
            
        except Exception as e:
            print(f"‚ùå Failed to connect to Arduino: {e}")
            print("üí° Tips:")
            print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Arduino ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö USB ‡πÅ‡∏•‡πâ‡∏ß")
            print(f"   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COM port: {self.port}")
            print("   - ‡∏õ‡∏¥‡∏î Arduino IDE ‡∏´‡∏£‡∏∑‡∏≠ Serial Monitor")
            self.connected = False
    
    def send_signal(self, detected):
        """‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ Arduino ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        current_time = time.time()
        
        if current_time - self.last_send_time >= Config.SEND_DELAY:
            if not self.connected:
                return False
            
            try:
                if detected:
                    self.arduino.write(b"90\n")
                    print("üì° ‚Üí Arduino: 90 (Plastic bottle detected)")
                else:
                    self.arduino.write(b"0\n")
                    print("üì° ‚Üí Arduino: 0 (No plastic bottle detected)")
                
                self.last_send_time = current_time
                return True
                
            except Exception as e:
                print(f"‚ùå Error sending to Arduino: {e}")
                return False
        
        return True  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á
    
    def close(self):
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if self.arduino and self.connected:
            self.arduino.close()
            print("üîå Arduino connection closed")

class FirebaseManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase"""
    
    def __init__(self, base_url=Config.FIREBASE_URL, user_id=Config.USER_ID):
        self.base_url = base_url
        self.user_id = user_id
    
    def send_data(self, data, path="bottle_data"):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Firebase"""
        try:
            url = f"{self.base_url}/{path}/{self.user_id}.json"
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
            data_with_timestamp = {
                **data,
                "timestamp": datetime.now().isoformat(),
                "unix_timestamp": int(time.time()),
                "model_version": "YOLOv11"
            }
            
            response = requests.put(url, json=data_with_timestamp, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ Firebase: Data sent successfully")
                return True
            else:
                print(f"‚ùå Firebase error: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Firebase connection error: {e}")
            return False

class YOLOv11DetectionSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ß‡∏î‡∏î‡πâ‡∏ß‡∏¢ YOLOv11"""
    
    def __init__(self):
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.bottle_count = 0
        self.total_points = 0
        self.last_detection_time = 0
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢
        self.arduino = ArduinoManager()
        self.firebase = FirebaseManager()
        
        # ‡πÇ‡∏´‡∏•‡∏î YOLOv11 model
        self.load_model()
        
        print("üéØ YOLOv11 Detection System initialized!")
    
    def load_model(self):
        """‡πÇ‡∏´‡∏•‡∏î YOLOv11 model"""
        try:
            if not os.path.exists(Config.MODEL_PATH):
                print(f"‚ùå Model file not found: {Config.MODEL_PATH}")
                print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á YOLOv11 model (.pt file) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
                print("üì• ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô MODEL_PATH ‡πÉ‡∏ô Config")
                sys.exit(1)
            
            self.model = YOLO(Config.MODEL_PATH)
            print(f"‚úÖ YOLOv11 model loaded: {Config.MODEL_PATH}")
            print(f"üéØ Target class ID: {Config.TARGET_CLASS_ID}")
            print(f"üìä Confidence threshold: {Config.CONF_THRESHOLD}")
            
        except Exception as e:
            print(f"‚ùå Failed to load YOLOv11 model: {e}")
            sys.exit(1)
    
    def on_bottle_detected(self, count=1):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡∏ß‡∏î"""
        current_time = time.time()
        
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if current_time - self.last_detection_time < Config.DETECTION_COOLDOWN:
            return
        
        self.last_detection_time = current_time
        self.bottle_count += count
        self.total_points = self.bottle_count * Config.POINTS_PER_BOTTLE
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"üçº [{timestamp}] Bottles detected: {count}, Total: {self.bottle_count}, Points: {self.total_points}")
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase
        data = {
            "bottle_count": self.bottle_count,
            "total_points": self.total_points,
            "last_detection": count,
            "device": "yolo_v11_python",
            "confidence_threshold": Config.CONF_THRESHOLD,
            "model_path": Config.MODEL_PATH
        }
        self.firebase.send_data(data)
    
    def reset_counter(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö"""
        self.bottle_count = 0
        self.total_points = 0
        print("üîÑ Counter reset!")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase
        data = {
            "bottle_count": 0,
            "total_points": 0,
            "last_detection": 0,
            "device": "yolo_v11_python",
            "action": "reset"
        }
        self.firebase.send_data(data)
    
    def draw_info(self, frame, detected, confidence=0.0):
        """‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (450, 140), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        texts = [
            f"YOLOv11 P2P Detection System",
            f"Total Bottles: {self.bottle_count}",
            f"Total Points: {self.total_points}",
            f"Detection: {'YES' if detected else 'NO'} ({confidence:.2f})",
            f"Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}"
        ]
        
        for i, text in enumerate(texts):
            y = 25 + (i * 22)
            color = (0, 255, 0) if i == 0 else (255, 255, 255)
            cv2.putText(frame, text, (15, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        
        return frame
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
        print("üöÄ Starting YOLOv11 bottle detection system...")
        print("Controls:")
        print("  'ESC' - Quit")
        print("  'r' - Reset counter")
        print("  's' - Show status")
        print("="*60)
        
        try:
            # ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î stream ‡∏Ç‡∏≠‡∏á YOLOv11
            for r in self.model.predict(
                source=Config.CAM_ID, 
                stream=True, 
                device=Config.DEVICE,
                conf=Config.CONF_THRESHOLD, 
                imgsz=Config.IMG_SIZE, 
                verbose=False
            ):
                frame = r.plot()  # ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏•‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ plastic bottle ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
                detected = False
                max_confidence = 0.0
                bottle_count_in_frame = 0
                
                if r.boxes is not None:
                    for box in r.boxes:
                        cls_id = int(box.cls[0])
                        conf = float(box.conf[0])
                        
                        if cls_id == Config.TARGET_CLASS_ID and conf >= Config.CONF_THRESHOLD:
                            detected = True
                            bottle_count_in_frame += 1
                            max_confidence = max(max_confidence, conf)
                
                # ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ Arduino
                self.arduino.send_signal(detected)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if detected:
                    self.on_bottle_detected(bottle_count_in_frame)
                
                # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                frame = self.draw_info(frame, detected, max_confidence)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û
                cv2.imshow(Config.WINDOW_NAME, frame)
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                key = cv2.waitKey(1) & 0xFF
                if key == 27:  # ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
                    break
                elif key == ord('r'):
                    self.reset_counter()
                elif key == ord('s'):
                    self.show_status()
        
        except KeyboardInterrupt:
            print("\nüõë System interrupted by user")
        
        except Exception as e:
            print(f"‚ùå System error: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            self.cleanup()
    
    def show_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        print("\n" + "="*60)
        print("üìä YOLOv11 SYSTEM STATUS")
        print("="*60)
        print(f"ü§ñ Model: {Config.MODEL_PATH}")
        print(f"üéØ Target Class ID: {Config.TARGET_CLASS_ID}")
        print(f"üìä Confidence Threshold: {Config.CONF_THRESHOLD}")
        print(f"üçº Total Bottles: {self.bottle_count}")
        print(f"‚≠ê Total Points: {self.total_points}")
        print(f"üîå Arduino: {'Connected' if self.arduino.connected else 'Disconnected'}")
        print(f"üî• Firebase: Ready")
        print(f"üìπ Camera ID: {Config.CAM_ID}")
        print(f"üíª Device: {Config.DEVICE}")
        print("="*60 + "\n")
    
    def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üßπ Cleaning up...")
        
        cv2.destroyAllWindows()
        
        if hasattr(self, 'arduino'):
            self.arduino.close()
        
        print("‚úÖ Cleanup completed")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ YOLOv11 Arduino Firebase Bridge v3.0")
    print("üéØ P2P (Plastic to Point) Detection System")
    print("ü§ñ Powered by YOLOv11")
    print("="*70)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
    try:
        import ultralytics
        print(f"‚úÖ Ultralytics version: {ultralytics.__version__}")
    except ImportError:
        print("‚ùå Ultralytics not found!")
        print("üì¶ Install with: pip install ultralytics")
        return
    
    try:
        system = YOLOv11DetectionSystem()
        system.run()
    except Exception as e:
        print(f"‚ùå System error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()